{
  "files": [
    {
      "filename": "slider.tsx",
      "content": "import {\n  Slider as ArkSlider,\n  type SliderRootProps,\n} from \"@ark-ui/react/slider\";\nimport { forwardRef, type ReactNode } from \"react\";\nimport { css, cx } from \"~/styled-system/css\";\nimport { splitCssProps } from \"~/styled-system/jsx\";\nimport {\n  sliderRecipe,\n  type SliderRecipeVariantProps,\n} from \"~/styled-system/recipes\";\nimport type { Assign, JsxStyleProps } from \"~/styled-system/types\";\n\nexport interface SliderProps\n  extends Assign<JsxStyleProps, SliderRootProps>,\n    SliderRecipeVariantProps {\n  children?: ReactNode;\n  marks?: {\n    value: number;\n    label?: ReactNode;\n  }[];\n}\n\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>((props, ref) => {\n  const [variantProps, sliderProps] = sliderRecipe.splitVariantProps(props);\n  const [cssProps, localProps] = splitCssProps(sliderProps);\n  const { children, className, ...rootProps } = localProps;\n  const styles = sliderRecipe(variantProps);\n\n  return (\n    <ArkSlider.Root\n      ref={ref}\n      className={cx(styles.root, css(cssProps), className)}\n      {...rootProps}\n    >\n      {(api) => (\n        <>\n          {children && (\n            <ArkSlider.Label className={styles.label}>\n              {children}\n            </ArkSlider.Label>\n          )}\n          <ArkSlider.Control className={styles.control}>\n            <ArkSlider.Track className={styles.track}>\n              <ArkSlider.Range className={styles.range} />\n            </ArkSlider.Track>\n            {api.value.map((_, index) => (\n              <ArkSlider.Thumb\n                key={index}\n                index={index}\n                className={styles.thumb}\n              />\n            ))}\n          </ArkSlider.Control>\n          {props.marks && (\n            <ArkSlider.MarkerGroup className={styles.markerGroup}>\n              {props.marks.map((mark) => (\n                <ArkSlider.Marker\n                  key={mark.value}\n                  value={mark.value}\n                  className={styles.marker}\n                >\n                  {mark.label}\n                </ArkSlider.Marker>\n              ))}\n            </ArkSlider.MarkerGroup>\n          )}\n        </>\n      )}\n    </ArkSlider.Root>\n  );\n});\n\nSlider.displayName = \"Slider\";\n",
      "hasMultipleParts": false
    }
  ]
}
