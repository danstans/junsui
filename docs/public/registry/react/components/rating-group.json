{"files":[{"filename":"rating-group.tsx","content":"import {\n  RatingGroup as ArkRatingGroup,\n  type RatingGroupRootProps,\n} from \"@ark-ui/react/rating-group\";\nimport { forwardRef, type ReactNode } from \"react\";\nimport { css, cx } from \"~/styled-system/css\";\nimport { splitCssProps } from \"~/styled-system/jsx\";\nimport {\n  ratingGroupRecipe,\n  type RatingGroupRecipeVariantProps,\n} from \"~/styled-system/recipes\";\nimport type { Assign, JsxStyleProps } from \"~/styled-system/types\";\n\nexport interface RatingGroupProps\n  extends Assign<JsxStyleProps, RatingGroupRootProps>,\n    RatingGroupRecipeVariantProps {\n  children?: ReactNode;\n}\n\nexport const RatingGroup = forwardRef<HTMLDivElement, RatingGroupProps>(\n  (props, ref) => {\n    const [variantProps, ratingGroupProps] =\n      ratingGroupRecipe.splitVariantProps(props);\n    const [cssProps, localProps] = splitCssProps(ratingGroupProps);\n    const { children, className, ...rootProps } = localProps;\n    const styles = ratingGroupRecipe(variantProps);\n\n    return (\n      <ArkRatingGroup.Root\n        ref={ref}\n        className={cx(styles.root, css(cssProps), className)}\n        {...rootProps}\n      >\n        {children && (\n          <ArkRatingGroup.Label className={styles.label}>\n            {children}\n          </ArkRatingGroup.Label>\n        )}\n        <ArkRatingGroup.Control className={styles.control}>\n          {({ items }) =>\n            items.map((index) => (\n              <ArkRatingGroup.Item\n                className={styles.item}\n                key={index}\n                index={index}\n              >\n                {({ isHalf }) => <StarIcon isHalf={isHalf} />}\n              </ArkRatingGroup.Item>\n            ))\n          }\n        </ArkRatingGroup.Control>\n      </ArkRatingGroup.Root>\n    );\n  }\n);\n\nRatingGroup.displayName = \"RatingGroup\";\n\ntype IconProps = {\n  isHalf: boolean;\n};\n\nconst StarIcon = (props: IconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"inherit\"\n    stroke=\"inherit\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <title>Star Icon</title>\n    <defs>\n      <linearGradient id=\"half\">\n        <stop offset=\"50%\" stopColor=\"var(--colors-color-palette-default)\" />\n        <stop offset=\"50%\" stopColor=\"var(--colors-bg-emphasized)\" />\n      </linearGradient>\n    </defs>\n    <polygon\n      fill={props.isHalf ? \"url(#half)\" : \"inherit\"}\n      points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"\n    />\n  </svg>\n);\n","hasMultipleParts":false}]}