{"files":[{"filename":"menu.tsx","content":"import { Menu } from \"@ark-ui/react/menu\";\nimport type { ComponentProps } from \"react\";\nimport { styled } from \"~/styled-system/jsx\";\nimport { menuRecipe } from \"~/styled-system/recipes\";\nimport { createStyleContext } from \"~/lib/create-style-context\";\n\nconst { withProvider, withContext } = createStyleContext(menuRecipe);\n\nexport const Root = withProvider(Menu.Root);\nexport const Arrow = withContext(styled(Menu.Arrow), \"arrow\");\nexport const ArrowTip = withContext(styled(Menu.ArrowTip), \"arrowTip\");\nexport const Content = withContext(styled(Menu.Content), \"content\");\nexport const ContextTrigger = withContext(\n  styled(Menu.ContextTrigger),\n  \"contextTrigger\"\n);\nexport const Item = withContext(styled(Menu.Item), \"item\");\nexport const ItemGroup = withContext(styled(Menu.ItemGroup), \"itemGroup\");\nexport const ItemGroupLabel = withContext(\n  styled(Menu.ItemGroupLabel),\n  \"itemGroupLabel\"\n);\nexport const OptionItem = withContext(styled(Menu.OptionItem), \"optionItem\");\nexport const Positioner = withContext(styled(Menu.Positioner), \"positioner\");\nexport const Separator = withContext(styled(Menu.Separator), \"separator\");\nexport const Trigger = withContext(styled(Menu.Trigger), \"trigger\");\nexport const TriggerItem = withContext(styled(Menu.TriggerItem), \"triggerItem\");\n\nexport interface RootProps extends ComponentProps<typeof Root> {}\nexport interface ArrowProps extends ComponentProps<typeof Arrow> {}\nexport interface ArrowTipProps extends ComponentProps<typeof ArrowTip> {}\nexport interface ContentProps extends ComponentProps<typeof Content> {}\nexport interface ContextTriggerProps\n  extends ComponentProps<typeof ContextTrigger> {}\nexport interface ItemProps extends ComponentProps<typeof Item> {}\nexport interface ItemGroupProps extends ComponentProps<typeof ItemGroup> {}\nexport interface ItemGroupLabelProps\n  extends ComponentProps<typeof ItemGroupLabel> {}\nexport interface OptionItemProps extends ComponentProps<typeof OptionItem> {}\nexport interface PositionerProps extends ComponentProps<typeof Positioner> {}\nexport interface SeparatorProps extends ComponentProps<typeof Separator> {}\nexport interface TriggerProps extends ComponentProps<typeof Trigger> {}\nexport interface TriggerItemProps extends ComponentProps<typeof TriggerItem> {}\n","hasMultipleParts":true}]}